
LCD - 06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000042c  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080012c  0080012c  000004ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127d  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  00001881  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083a  00000000  00000000  00002232  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e6  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000897  00000000  00000000  000030ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003981  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 14 02 	jmp	0x428	; 0x428 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:


int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	00 e1       	ldi	r16, 0x10	; 16
 206:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < 16; i++)
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
    for (uint8_t i = 0; i < 16; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
    }
    // Set DDRAM address
    lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    
    // Display first custom character
    lcd_putc(0);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
    lcd_gotoxy(12, 0);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_putc(0x01);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

       
       
       
    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0   a");
 236:	80 e1       	ldi	r24, 0x10	; 16
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    lcd_gotoxy(1, 1);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("b         c");    
 246:	8c e1       	ldi	r24, 0x1C	; 28
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    //    lcd_putc('!');

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set the overflow prescaler to 16 ms and enable interrupt
    TIM2_overflow_16ms();
 24e:	e1 eb       	ldi	r30, 0xB1	; 177
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	87 60       	ori	r24, 0x07	; 7
 256:	80 83       	st	Z, r24
    TIM2_overflow_interrupt_enable();
 258:	e0 e7       	ldi	r30, 0x70	; 112
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 262:	78 94       	sei
 264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x70>

00000266 <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           i e approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 d0       	rcall	.+0      	; 0x28e <__vector_9+0x28>
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
    static uint8_t number_of_overflows = 0;
    static uint8_t desetiny = 0;        // Tenths of a second
    static uint8_t sek = 0;        // Seconds
    static uint8_t minut = 0;        // Seconds
    static uint16_t squa = 0;
    char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 292:	80 e2       	ldi	r24, 0x20	; 32
 294:	90 e2       	ldi	r25, 0x20	; 32
 296:	9a 83       	std	Y+2, r25	; 0x02
 298:	89 83       	std	Y+1, r24	; 0x01

    number_of_overflows++;
 29a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <number_of_overflows.1951>
 29e:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 2a0:	86 30       	cpi	r24, 0x06	; 6
 2a2:	18 f4       	brcc	.+6      	; 0x2aa <__vector_9+0x44>
    static uint8_t sek = 0;        // Seconds
    static uint8_t minut = 0;        // Seconds
    static uint16_t squa = 0;
    char lcd_string[2] = "  ";      // String for converting numbers by itoa()

    number_of_overflows++;
 2a4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <number_of_overflows.1951>
 2a8:	75 c0       	rjmp	.+234    	; 0x394 <__vector_9+0x12e>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2aa:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <number_of_overflows.1951>

        // WRITE YOUR CODE HERE
        desetiny++;
 2ae:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <desetiny.1952>
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
        if (desetiny >= 10)
 2b4:	8a 30       	cpi	r24, 0x0A	; 10
 2b6:	18 f4       	brcc	.+6      	; 0x2be <__vector_9+0x58>
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;

        // WRITE YOUR CODE HERE
        desetiny++;
 2b8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <desetiny.1952>
 2bc:	26 c0       	rjmp	.+76     	; 0x30a <__vector_9+0xa4>
        if (desetiny >= 10)
        {
            desetiny = 0;
 2be:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <desetiny.1952>
            sek++;
 2c2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <sek.1953>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
            squa = sek * sek;
//            itoa(squa, lcd_string, 100);
//            lcd_gotoxy(11,0);
//            lcd_puts(squa);
            if (sek >= 60)
 2c8:	8c 33       	cpi	r24, 0x3C	; 60
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <__vector_9+0x6c>
        // WRITE YOUR CODE HERE
        desetiny++;
        if (desetiny >= 10)
        {
            desetiny = 0;
            sek++;
 2cc:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <sek.1953>
 2d0:	1c c0       	rjmp	.+56     	; 0x30a <__vector_9+0xa4>
//            itoa(squa, lcd_string, 100);
//            lcd_gotoxy(11,0);
//            lcd_puts(squa);
            if (sek >= 60)
            {
                sek = 0;
 2d2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <sek.1953>
                lcd_gotoxy(4, 0);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
                lcd_puts("00");
 2de:	88 e2       	ldi	r24, 0x28	; 40
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
                minut++;
 2e6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
                if (minut >= 60)
 2ec:	8c 33       	cpi	r24, 0x3C	; 60
 2ee:	18 f4       	brcc	.+6      	; 0x2f6 <__vector_9+0x90>
            if (sek >= 60)
            {
                sek = 0;
                lcd_gotoxy(4, 0);
                lcd_puts("00");
                minut++;
 2f0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 2f4:	0a c0       	rjmp	.+20     	; 0x30a <__vector_9+0xa4>
                if (minut >= 60)
                {
                    minut = 0;
 2f6:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
                    lcd_gotoxy(1, 0);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
                    lcd_puts("00");
 302:	88 e2       	ldi	r24, 0x28	; 40
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 30a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <desetiny.1952>
 30e:	4a e0       	ldi	r20, 0x0A	; 10
 310:	be 01       	movw	r22, r28
 312:	6f 5f       	subi	r22, 0xFF	; 255
 314:	7f 4f       	sbci	r23, 0xFF	; 255
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 df 01 	call	0x3be	; 0x3be <__itoa_ncheck>
                    
                }
            }
        }
        itoa(desetiny, lcd_string, 10);     // Convert decimal value to string
        lcd_gotoxy(7, 0);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	87 e0       	ldi	r24, 0x07	; 7
 320:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
        lcd_puts(lcd_string);
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 32c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <sek.1953>
 330:	4a e0       	ldi	r20, 0x0A	; 10
 332:	be 01       	movw	r22, r28
 334:	6f 5f       	subi	r22, 0xFF	; 255
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 df 01 	call	0x3be	; 0x3be <__itoa_ncheck>
        
        itoa(sek, lcd_string, 10);
        if (sek < 10) {
 33e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <sek.1953>
 342:	8a 30       	cpi	r24, 0x0A	; 10
 344:	28 f4       	brcc	.+10     	; 0x350 <__vector_9+0xea>
            lcd_gotoxy(5, 0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 34e:	04 c0       	rjmp	.+8      	; 0x358 <__vector_9+0xf2>
            } else {
            lcd_gotoxy(4, 0);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	84 e0       	ldi	r24, 0x04	; 4
 354:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
        }
        lcd_puts(lcd_string);
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 360:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 364:	4a e0       	ldi	r20, 0x0A	; 10
 366:	be 01       	movw	r22, r28
 368:	6f 5f       	subi	r22, 0xFF	; 255
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 df 01 	call	0x3be	; 0x3be <__itoa_ncheck>

        itoa(minut, lcd_string, 10);
        if (minut < 10) {
 372:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 376:	8a 30       	cpi	r24, 0x0A	; 10
 378:	28 f4       	brcc	.+10     	; 0x384 <__vector_9+0x11e>
            lcd_gotoxy(2, 0);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 382:	04 c0       	rjmp	.+8      	; 0x38c <__vector_9+0x126>
            } else {
            lcd_gotoxy(1, 0);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
        }
        lcd_puts(lcd_string);
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
        

    }
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	bf 91       	pop	r27
 3a2:	af 91       	pop	r26
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	7f 91       	pop	r23
 3aa:	6f 91       	pop	r22
 3ac:	5f 91       	pop	r21
 3ae:	4f 91       	pop	r20
 3b0:	3f 91       	pop	r19
 3b2:	2f 91       	pop	r18
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__itoa_ncheck>:
 3be:	bb 27       	eor	r27, r27
 3c0:	4a 30       	cpi	r20, 0x0A	; 10
 3c2:	31 f4       	brne	.+12     	; 0x3d0 <__itoa_ncheck+0x12>
 3c4:	99 23       	and	r25, r25
 3c6:	22 f4       	brpl	.+8      	; 0x3d0 <__itoa_ncheck+0x12>
 3c8:	bd e2       	ldi	r27, 0x2D	; 45
 3ca:	90 95       	com	r25
 3cc:	81 95       	neg	r24
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
 3d0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__utoa_common>

000003d4 <__utoa_ncheck>:
 3d4:	bb 27       	eor	r27, r27

000003d6 <__utoa_common>:
 3d6:	fb 01       	movw	r30, r22
 3d8:	55 27       	eor	r21, r21
 3da:	aa 27       	eor	r26, r26
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	aa 1f       	adc	r26, r26
 3e2:	a4 17       	cp	r26, r20
 3e4:	10 f0       	brcs	.+4      	; 0x3ea <__utoa_common+0x14>
 3e6:	a4 1b       	sub	r26, r20
 3e8:	83 95       	inc	r24
 3ea:	50 51       	subi	r21, 0x10	; 16
 3ec:	b9 f7       	brne	.-18     	; 0x3dc <__utoa_common+0x6>
 3ee:	a0 5d       	subi	r26, 0xD0	; 208
 3f0:	aa 33       	cpi	r26, 0x3A	; 58
 3f2:	08 f0       	brcs	.+2      	; 0x3f6 <__utoa_common+0x20>
 3f4:	a9 5d       	subi	r26, 0xD9	; 217
 3f6:	a1 93       	st	Z+, r26
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	79 f7       	brne	.-34     	; 0x3da <__utoa_common+0x4>
 3fc:	b1 11       	cpse	r27, r1
 3fe:	b1 93       	st	Z+, r27
 400:	11 92       	st	Z+, r1
 402:	cb 01       	movw	r24, r22
 404:	0c 94 04 02 	jmp	0x408	; 0x408 <strrev>

00000408 <strrev>:
 408:	dc 01       	movw	r26, r24
 40a:	fc 01       	movw	r30, r24
 40c:	67 2f       	mov	r22, r23
 40e:	71 91       	ld	r23, Z+
 410:	77 23       	and	r23, r23
 412:	e1 f7       	brne	.-8      	; 0x40c <strrev+0x4>
 414:	32 97       	sbiw	r30, 0x02	; 2
 416:	04 c0       	rjmp	.+8      	; 0x420 <strrev+0x18>
 418:	7c 91       	ld	r23, X
 41a:	6d 93       	st	X+, r22
 41c:	70 83       	st	Z, r23
 41e:	62 91       	ld	r22, -Z
 420:	ae 17       	cp	r26, r30
 422:	bf 07       	cpc	r27, r31
 424:	c8 f3       	brcs	.-14     	; 0x418 <strrev+0x10>
 426:	08 95       	ret

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
